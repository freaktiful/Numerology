/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package numerology;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

import numerology.Numerology;


public class NumerologyTest {
    @Test 
    public void testReplaceEachNineForTwoTens() {
        Numerology numerology = new Numerology();
        assertEquals(Arrays.asList(1,1,5,3,4,3,3,3,3,3,3,3,3,3,3,7,8,10,10,9), numerology.generateOutput(Arrays.asList(1,2,3,4,4,6,7,8,9,10)));
    }
    
    @Test
    public void testReplaceAllTwosByOnesNumberToTheLeft() {
    	Numerology numerology = new Numerology();
        assertEquals(Arrays.asList(5,1,1,1,3,3,5), numerology.generateOutput(Arrays.asList(3,2,3,4,5)));
    }
    
    @Test
    public void testReplaceAllSixsByThreesNumberToTheRightPositionsNumberToTheLeft () {
    	Numerology numerology = new Numerology();
        assertEquals(Arrays.asList(1,3,3,3,5,3,5), numerology.generateOutput(Arrays.asList(1,6,3,4,5)));
    }
    
    @Test
    public void testReplaceEachThreeWithFiveIfNotFollowedByFiveAndReplaceEachFourByThreeIfNotPreceededByFive() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(3,5), numerology.generateOutput(Arrays.asList(3,5)));
    	assertEquals(Arrays.asList(5,15), numerology.generateOutput(Arrays.asList(3,15)));
    	assertEquals(Arrays.asList(5,3), numerology.generateOutput(Arrays.asList(5,4)));
    	assertEquals(Arrays.asList(15,3), numerology.generateOutput(Arrays.asList(15,4)));
    }
    
    @Test
    public void testReplaceNoMoreThanOneThreeOrFourOnARow() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(11, 12, 5, 20, 3, 17, 3, 3, 12, 5, 9), numerology.generateOutput(Arrays.asList(11, 12, 3, 20, 3, 17, 3, 4, 12, 3, 10)));
    	assertEquals(Arrays.asList(11, 12, 3, 20, 4, 17, 4, 5, 12, 3, 9), numerology.generateOutput(Arrays.asList(11, 12, 4, 20, 4, 17, 4, 3, 12, 4, 10)));
    }
    
    @Test
    public void testReplaceNoMoreThanFourThreesAndThreeFoursBeforeASevenAppears() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(5, 3, 5, 3, 5, 3, 5, 4, 3, 4, 3, 7, 5, 3, 5, 3), numerology.generateOutput(Arrays.asList(3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 7, 3, 4, 3, 4)));
    }
    
    @Test
    public void testFringeCasesReplacingThreesAndFours() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(5,5), numerology.generateOutput(Arrays.asList(5,3)));
    	assertEquals(Arrays.asList(3,6), numerology.generateOutput(Arrays.asList(4,5)));
    }
    
    @Test
    public void testReplaceLastDigitByTheLowestNextOddNumberIfTheFirstDigitIsOdd() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(1,11,9), numerology.generateOutput(Arrays.asList(1,11,10)));
    	assertEquals(Arrays.asList(1,11,11), numerology.generateOutput(Arrays.asList(1,11,11)));
    	assertEquals(Arrays.asList(12,11,10), numerology.generateOutput(Arrays.asList(12,11,10)));
    	
    }
    
    @Test
    public void testReplaceLastDigitByTheHighestNextEvenNumberIfTheFirstDigitIsEven() {
    	Numerology numerology = new Numerology();
    	assertEquals(Arrays.asList(12,17,6), numerology.generateOutput(Arrays.asList(12,17,5)));
    	assertEquals(Arrays.asList(12,17,12), numerology.generateOutput(Arrays.asList(12,17,12)));
    	assertEquals(Arrays.asList(13,11,11), numerology.generateOutput(Arrays.asList(13,11,11)));
    	
    }
    
}
